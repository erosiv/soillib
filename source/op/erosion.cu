#ifndef SOILLIB_NODE_EROSION_CU
#define SOILLIB_NODE_EROSION_CU
#define HAS_CUDA

#include <soillib/util/error.hpp>

#include <cuda_runtime.h>
#include <math_constants.h>
#include <iostream>

#include <soillib/op/common.hpp>
#include <soillib/op/gather.hpp>
#include <soillib/op/erosion.hpp>

#include "erosion_thermal.cu"

namespace soil {

//
// Randstate and Estimate Initialization / Filtering
//

__global__ void seed(buffer_t<curandState> buffer, const size_t seed, const size_t offset) {
  const unsigned int n = blockIdx.x * blockDim.x + threadIdx.x;
  if(n >= buffer.elem()) return;
  curand_init(seed, n, offset, &buffer[n]);
}

__global__ void reset(model_t model){
  
  const unsigned int n = blockIdx.x * blockDim.x + threadIdx.x;
  if(n >= model.elem) return;
  
  // Reset Estimation Buffers

  model.discharge_track[n] = 0.0f;
  model.momentum_track[n] = vec2(0.0f);

}

__global__ void filter(model_t model, const param_t param){

  const unsigned int n = blockIdx.x * blockDim.x + threadIdx.x;
  if(n >= model.elem) return;

  // Apply Simple Exponential Filter to Noisy Estimates

  model.discharge[n] = glm::mix(model.discharge[n], model.discharge_track[n], param.lrate);
  model.momentum[n] = glm::mix(model.momentum[n], model.momentum_track[n], param.lrate);

}

//
// Erosion Kernels
//

__device__ float equ_frac(const model_t& model, vec2 pos, vec2 npos, const param_t param){

  const int find = model.index.flatten(pos);
  const int nind = model.index.flatten(npos);

  float h0 = model.height[find] + model.sediment[find];//*model.scale.y;
  float h1 = h0 - param.exitSlope; // Exitslope is in real values!
  if(!model.index.oob(npos)){
    h1 = model.height[nind] + model.sediment[nind];//*model.scale.y;
  }

  const float discharge = glm::max(0.0f, model.discharge[find]);  // Discharge Volume
  const float slope = (h0 - h1);//model.scale.x;                    // Local Slope (Divide by Scale)

  return glm::max(slope, 0.0f) * param.entrainment * log(1.0f + discharge);

}

__global__ void solve(model_t model, const size_t N, const param_t param){

  const unsigned int ind = blockIdx.x * blockDim.x + threadIdx.x;
  if(ind >= N) return;

  //
  // Parameters
  // Note: Scale-Normalize Values
  //

  const float mu = param.momentumTransfer;
  const float g = param.gravity;
  const float k = param.depositionRate;

  //
  // Initial Condition
  //
  
  // Trajectory and Integration State

  const float P = float(model.elem)/float(N); // Sample Probability
  curandState* randState = &model.rand[ind];
  vec2 pos = vec2{
    curand_uniform(randState)*float(model.index[0]),
    curand_uniform(randState)*float(model.index[1])
  };

  int find = model.index.flatten(pos);

  // Water and Sediment Masses

  const float rho_vol = 1.0f;
  float vol = 1.0f;
  float mass = rho_vol*vol;

  lerp5_t<float> lerp;
  lerp.gather(model.height, model.sediment, model.index, ivec2(pos));
  //lerp.gather(model.height, model.index, ivec2(pos));
  const vec2 grad = lerp.grad(model.scale);

  const vec3 normal = glm::normalize(vec3(-grad.x, -grad.y, 1.0f));
  const vec2 average_speed = (model.momentum[find]) / (1.0f + rho_vol*model.discharge[find]);
  vec2 speed = g * vec2(normal.x, normal.y) + (mu / mass) * average_speed;
  vec2 dspeed = speed;

  // Sediment Transport:
  // Doing this differentially is unstable for some reason.
  // For now, we just integrate the solution directly.

//  vec2 npos = pos + sqrt(2.0f)*glm::normalize(speed);
//  const float equilibrium = vol * (equ_frac(model, pos, npos, param));
//  float dsed = k*equilibrium;
//  atomicAdd(&model.height[find], -dsed);
  float sed = 0.0f;

  // Solution Loop:
  //  Solve Conservation Law along Characteristic
  //  Generated by the Flow.

  for(size_t age = 0; age < param.maxage; ++age){

    // Termination Conditions

    if(model.index.oob(pos))      return;
    if(vol < param.minVol)        return;
    if(glm::length(speed) < 1E-4) return;

    //
    // Execute Integration
    //

    // Flow Integration / Trajectory

    lerp5_t<float> lerp;
    lerp.gather(model.height, model.sediment, model.index, ivec2(pos));
    //lerp.gather(model.height, model.index, ivec2(pos));
    const vec2 grad = lerp.grad(model.scale);

    const vec3 normal = glm::normalize(vec3(-grad.x, -grad.y, 1.0f));
    const vec2 average_speed = (model.momentum[find]) / (1.0f + rho_vol*model.discharge[find]);

    vec2 nspeed = speed + g * vec2(normal.x, normal.y) + (mu / mass)*(average_speed - speed);

    //
    // Time-Step Normalization
    //

    // Note: Here we should see if we can use the length of the speed
    //  vector as the inverse of the time-step. That would help scale
    //  things correctly.
    //  Additionally, we should limit the magnitude of the velocity,
    //  because it does have the change to run-away despite the viscosity.

    vec2 npos = pos;
    if(glm::length(nspeed) > 0.0){
      npos += sqrt(2.0f)*glm::normalize(nspeed);
    } else {
      // note: if the position becomes the same,
      // slope will also be zero
      // meaning equilibrium drops to zero
      // which could cause a chain reaction of deposition
      break;
    }

    //
    // Accumulate Estimated Values
    //

    // Note: Accumulation Occurds at Current Position

    atomicAdd(&model.discharge_track[find], P*vol);
    atomicAdd(&model.momentum_track[find].x, P*mass*dspeed.x);
    atomicAdd(&model.momentum_track[find].y, P*mass*dspeed.y);

    //
    // Mass-Transfer
    //

    // Note: Differential Integration is Unstable due to Height-Map
    // So we do direct integration instead, assuming segmented
    // fluid packets.

    // atomicAdd(&model.suspended_track[find], P*dsed);
    // const float equilibrium = vol * (equ_frac(model, pos, npos, param));
    // atomicAdd(&model.height[find], -k*(equilibrium - model.suspended[find]));
    // dsed *= (1.0f - k);

    // Note: This expression for the equilibrium concentration depends solely on
    // the discharge volume. That means that the small gradient along curved flows
    // leads a meander to progress. To increase this effect, and get the meanders
    // to "buckle", the equilibrium concentration needs to be increased further
    // on the outer edge of the curve.

    // Old Version:
    // const float equilibrium = vol * (equ_frac(model, pos, npos, param));
    // atomicAdd(&model.height[find], -k*(equilibrium - sed));
    // sed += k * (equilibrium - sed);
    
    // Equilibrium Suspension Amount:
    
    const float equilibrium = vol * (equ_frac(model, pos, npos, param));

    // Layered Equilibrium Suspension:

    const float height_0 = model.height[find];
    const float height_1 = model.sediment[find];

    // Stream can Suspend more Sediment
    //  Note: We can use different equilibriation
    //  coefficients for these two processes
    if(equilibrium > sed){

      // We move down the layers and suspend what we can:
      float suspdiff = (equilibrium - sed);
      const float transfer_1 = glm::min(height_1, k*suspdiff);
      atomicAdd(&model.sediment[find], -transfer_1);
      sed += transfer_1;

      // Repeat
      //  Note that for the bedrock layer, the value can go below zero
      suspdiff = (equilibrium - sed);
      const float transfer_0 = k*suspdiff; // glm::min(height_0, );
      atomicAdd(&model.height[find], -transfer_0);
      sed += transfer_0;

    }

    if(equilibrium < sed){

      // We add sediment to the top layer
      float suspdiff = (equilibrium - sed);
      const float transfer_1 = glm::min(sed, -k*suspdiff);
      atomicAdd(&model.sediment[find], transfer_1);
      sed -= transfer_1;

    }
  
    // Note: We should limit it so that this doesn't cause a runaway deposition.
    // That occurs when the amount removed is larger than making the flow flat.
    // The particles coming from behind will then hit that wall and deposity everything.
    // Or we make sure we can't deposit more than equal the amount.
    // Finally, we should add a term which is based on the viscosity, meaning that
    // if the difference between the velocity and the target velocity is larger,
    // we scale the equilibrium value because we have a higher shear-stress.

    //
    // Integrate Sub-Solution Quantities
    //

    vol *= (1.0f - param.evapRate);
    dspeed += - (mu / mass)*dspeed;
    mass = rho_vol*vol;

    // Update Position at next Position?
    // We do this because technically,
    // we have moved forward to where
    // the velocity has changed as specified.

    //
    // Update Trajectory
    //

    pos = npos;
    speed = nspeed;
    find = model.index.flatten(pos);

  }

}

//
// Erosion Function
//

void erode(model_t& model, const param_t param, const size_t steps){

  if(model.height.host() != soil::host_t::GPU){
    throw soil::error::mismatch_host(soil::host_t::GPU, model.height.host());
  }

  if(model.discharge.host() != soil::host_t::GPU){
    throw soil::error::mismatch_host(soil::host_t::GPU, model.discharge.host());
  }

  if(model.momentum.host() != soil::host_t::GPU){
    throw soil::error::mismatch_host(soil::host_t::GPU, model.momentum.host());
  }
  
  //
  // Initialize Rand-State Buffer (One Per Sample)
  //

  const size_t n_samples = param.samples;

  // note: the offset in the sequence should be number of times rand is sampled
  // that way the sampling procedure becomes deterministic

  if(model.rand.elem() != n_samples){
    model.rand = soil::buffer_t<curandState>(n_samples, soil::host_t::GPU);
    seed<<<block(n_samples, 512), 512>>>(model.rand, 0, 2 * model.age);
    cudaDeviceSynchronize();
  }

  //
  // Estimate Buffers
  //

  model.discharge_track = soil::buffer_t<float>(model.discharge.elem(), soil::host_t::GPU);
  model.momentum_track = soil::buffer_t<vec2>(model.discharge.elem(), soil::host_t::GPU);

  //
  // Execute Solution
  //

  for(size_t step = 0; step < steps; ++step){

    //
    // Reset, Solve, Filter, Apply
    //

    reset<<<block(model.elem, 1024), 1024>>>(model);
    cudaDeviceSynchronize();

    solve<<<block(n_samples, 512), 512>>>(model, n_samples, param);
    cudaDeviceSynchronize();
 
    filter<<<block(model.elem, 1024), 1024>>>(model, param);
    cudaDeviceSynchronize();

    //
    // Debris Flow Kernel
    //

    // debris_flow<<<block(n_samples, 512), 512>>>(model, n_samples, param);
    // cudaDeviceSynchronize();

    model.age++; // Increment Model Age for Rand-State Initialization

  }

}

} // end of namespace soil

#endif